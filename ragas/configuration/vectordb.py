from .base import *
from pathlib import Path
from typing import IO, TYPE_CHECKING, Any, Literal, Mapping, Sequence, overload

import ConfigSpace
from ConfigSpace import ConfigurationSpace, ForbiddenEqualsClause, ForbiddenAndConjunction, ForbiddenInClause, InCondition, NotEqualsCondition
from ConfigSpace.hyperparameters import CategoricalHyperparameter, UniformIntegerHyperparameter, UniformFloatHyperparameter, Constant
from chromadb import (
	DEFAULT_TENANT,
	DEFAULT_DATABASE,
)

VECTORDB_STATIC_PARAMS = {
    "chroma": {
        "client_type": "persistent",
        "host": "localhost",
        "port": 8000,
        "ssl": False,
        "headers": None,
        "api_key": None,
        "tanant": DEFAULT_TENANT,
        "database": DEFAULT_DATABASE,
    },
    "couchbase": {
        "index_name": "my_vector_index",  # replace your index name
        "host": "localhost",
        "port": 8091,
        "username": "Administrator",
        "password": "password",
        "bucket_name": "default", # replace your bucket name
        "scope_name": "_default",  # replace your scope name
        "connection_string": "couchbase://localhost",  # replace your connection string
        "text_key": "text",
        "embedding_key": "embedding",
        "scoped_index": True
    },
    "milvus": {
        "index_type": "IVF_FLAT", #
        "uri": "http://localhost:19530",
        "db_name": "", # replace your bucket name
        "token": "", # Set this if your Milvus server requires token-based authentication.
        "user": "", # Set this if your Milvus server requires username/password authentication.
        "password": "", #  Set this if your Milvus server requires username/password authentication.
        "timeout": 30.0, #  Specifies the timeout duration (in seconds) for Milvus operations.
    },
    "pinecone": {
        "index_name": "my_vector_index", # Sets the name of the Pinecone index where the vectors will be stored.
        "api_key": "your_api_key", # The API key for authentication with the Pinecone.
        "dimension": 1536, # The dimension of the vectors. This should correspond to the dimension of the embeddings generated by the specified embedding model.
        "cloud": "aws", # The cloud provider where the Pinecone index will be created. https://docs.pinecone.io/guides/indexes/understanding-indexes#serverless-indexes
        "region": "us-east-1", # The region where the Pinecone index will be hosted.
        "deletion_protection": "disabled", # Specifies whether deletion protection is enabled for the Pinecone index.
        "namespace": "default", # Specifies the namespace where the Pinecone index is located.
    },
    "qdrant": {
        "client_type": "docker", # available: [docker, cloud], The type of client to use for connecting to the Qdrant server.
        "url": "http://localhost:6333", # The URL of the Qdrant server.
        "host": "", # The host of the Qdrant server.
        "api_key": "", # The API key for the authentication of Qdrant server.
        "dimension": 1536, # The dimension of the vectors. This should correspond to the dimension of the embeddings generated by the specified embedding model.
        "parallel": 1, # Determines the number of parallel requests to the Qdrant server.
        "max_retries": 3, # Determines the maximum number of retries for the Qdrant server.
    },
    "weaviate": {
        "client_type": "docker", # available: [docker, cloud], The type of client to use for connecting to the Weaviate server.
        "host": "localhost", # The host of the Weaviate server.
        "port": 8080, # The port of the Weaviate server.
        "grpc_port": 50051, # The gRPC port of the Weaviate server.
        "url": None, # The URL of the Weaviate server.
        "api_key": None, # The API key for the authentication of Weaviate server.
        "text_key": "content", # Specifies the name of the property in Weaviate where the text data is stored.
    }
}

def get_db_static_params(method: str) -> Dict:
    """
    Get the default parameters for the database.
    These would not be used for hyperparameter optimization.
    """
    pass

class VectorDBConfiguration(BaseConfiguration):

    def __init__(self, config: Dict, project_dir: Optional[str] = None):
        super().__init__(config, project_dir)
        self.cs = self.build()

    @classmethod
    def from_yaml(cls,
                  path: str | Path | IO[str],
                  project_dir: Optional[str] = None,
                  **kwargs: Any,) -> ConfigurationSpace:
        """Decode a serialized configuration space from a yaml file.
        Args:
            path: Path to the serialized configuration space
            project_dir: The project directory to use as the base directory for relative paths
            **kwargs: Any additional arguments to pass to `yaml.safe_load`
        Returns:
            The decoded configuration
        """
        import yaml

        if isinstance(path, (str, Path)):
            p = Path(path)
            with p.open("r") as f:
                d = yaml.safe_load(f, **kwargs)
        else:
            d = yaml.safe_load(path, **kwargs)
        cs = cls.from_serialized_dict(d, decoders=decoders)
        return cls(cs, project_dir=project_dir)

    def build(self, config: Dict) -> None:
        cs = ConfigurationSpace(
            space={
                "vectordb_name": CategoricalHyperparameter("vectordb_name", ["chroma", "couchbase", "milvus",
                                                                             "pinecone", "qdrant", "weaviate"],
                                                           weights=[1, 1, 1, 1, 1, 1]),
            }
        )

        # Add general hyperparameters
        embedding_model = CategoricalHyperparameter("embedding_model", choices=["openai", "bert", "gpt-3"])
        embedding_batch = UniformIntegerHyperparameter("embedding_batch", lower=50, upper=200, default_value=100)
        similarity_metric = CategoricalHyperparameter("similarity_metric", choices=["cosine", "euclidean", "ip"],
                                                      default_value="cosine")
        collection_name = CategoricalHyperparameter("collection_name",
                                                    choices=["collection1", "collection2", "collection"])
        ingest_batch = UniformIntegerHyperparameter("ingest_batch", lower=50, upper=200, default_value=100)
        cs.add([embedding_model, embedding_batch, similarity_metric, collection_name, ingest_batch])

        # add conditions
        cs.add([
            # USE cs["collection_name"] only if vectordb_name != "pinecone"
            NotEqualsCondition(cs["collection_name"], cs["vectordb_name"], "pinecone"),
            # cs["similarity_metric"] == "ip" if vectordb_name == "couchbase"
            ForbiddenAndConjunction(
                ForbiddenEqualsClause(cs["vectordb_name"], "couchbase"),
                ForbiddenInClause(cs['similarity_metric'], ["cosine", "euclidean"])
            ),
            # USE cs["ingest_batch"]  if vectordb_name in ["couchbase", "milvus", "pinecone"]
            InCondition(cs["ingest_batch"], cs["vectordb_name"], ["couchbase", "milvus", "pinecone"]),
        ])

        # add hyperparameter configuration space for milvus
        cs.add_configuration_space(
            prefix="",
            delimiter="",
            configuration_space=ConfigurationSpace({
                "index_type": CategoricalHyperparameter("index_type", choices=["IVF_FLAT", "IVF_SQ8"]),
            }),
            parent_hyperparameter={"parent": cs["vectordb_name"], "value": "milvus"},
        )
        return cs

    def sampling(self, size: Optional[int] = 1) -> Union[Configuration, List[Configuration]]:
        return self.cs.sample_configuration(size)

